{"version":3,"sources":["components/elements/Input.tsx","components/elements/Button.tsx","components/elements/TaskInput.tsx","components/elements/ErrorMessage.tsx","lib/redux/types/auth.ts","lib/redux/types/todos.ts","lib/redux/types/toast.ts","api/api.ts","api/todo.ts","lib/redux/actions/toast.ts","lib/redux/actions/auth.ts","lib/redux/actions/todos.ts","lib/redux/reducers/auth.ts","lib/redux/reducers/todos.ts","lib/redux/reducers/toast.ts","lib/redux/selectors/auth.ts","lib/redux/selectors/todos.ts","lib/redux/selectors/toast.ts","components/Tag/index.tsx","components/TaskManager/TaskCard/config.ts","components/TaskManager/TaskCard/index.tsx","components/Footer/index.tsx","components/Task/index.tsx","components/TaskManager/TaskManager.tsx","components/Nav/index.tsx","components/Profile/index.tsx","components/forms/Login/config.ts","components/forms/Login/index.tsx","components/forms/Signup/config.ts","components/forms/Signup/index.tsx","constants/index.ts","app.tsx","hooks/useNotification.ts","lib/redux/init/rootReducer.ts","lib/redux/init/middleware.ts","lib/redux/init/store.ts","index.tsx"],"names":["Input","props","input","placeholder","type","register","className","error","message","defaultProps","Button","onClick","onSetNewTask","class","children","TaskInput","value","onChange","event","target","ErrorMessage","authTypes","Object","freeze","SET_TOKEN","SET_ISLOGGEDIN","START_FETCHING","STOP_FETCHING","todosTypes","ADD_TODO","SET_TODO_BY_ID","SET_TODOS","DELETE_TODO","SET_NEW_TASK_CARD","SET_TAGS","SET_IS_TASK_CARD_OPEN","SET_SELECTED_TAG_ID","SET_SELECTED_TASK_ID","RESET_ALL","toastTypes","ERROR","SUCCESS","INFO","RESET","TODO_API_URL","AUTH_URL","TASKS_URL","api","token","localStorage","getItem","async","userInfo","data","axios","post","credentials","email","password","get","headers","Authorization","window","btoa","todoApi","todo","id","body","put","console","log","delete","tags","toastActions","setError","errorMessage","notification","payload","setSuccess","successMessage","setInfo","infoMessage","reset","authActions","setToken","setIsloggedin","status","startFetching","stopFetching","signUpAsync","dispatch","confirmPassword","newUser","signup","name","setItem","loginAsync","login","logoutAsync","logout","removeItem","todosActions","setIsTaskCardOpen","boolean","setNewTaskCard","addTodo","setTodoById","setTodos","deleteTodo","todoList","setTags","tasks","setSelectedTagId","setSelectedTaskId","resetAll","addTodoAsync","todoTask","updateTodoAsync","updateTodoById","deleteTodoAsync","getTodosAsync","todos","getTodos","getTodoByIdAsync","getTodoById","getTagsAsync","todoById","getTags","tag","initialState","isLoggedin","currentTodoId","isTaskCardOpen","selectedTagId","selectedTaskId","notificationMessage","getIsloggedin","state","auth","getIsTaskCardOpen","getSelectedTagId","getNotification","toast","Tag","color","bg","onGetTagId","useDispatch","useSelector","style","background","schema","yup","shape","title","min","max","required","description","TaskCard","startDate","deadline","Date","useEffect","form","useForm","mode","resolver","yupResolver","setValue","completed","tagsJSX","map","onSubmit","handleSubmit","taskToDo","dispatchAction","preventDefault","todoCompleted","updatedTodoList","filter","onDelete","control","render","field","locale","ru","date","minDate","selected","formState","errors","Footer","Task","onGetTodoById","format","TaskManager","tasksJSX","to","length","Nav","pageURL","page","navigate","useNavigate","onDisable","Profile","Login","tooShortMessage","tooLongMessage","oneOf","Signup","toastOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","App","success","info","useNotification","theme","icon","newestOnTop","transition","Slide","path","element","replace","rootReducer","combineReducers","action","isFetching","createLogger","duration","collapsed","colors","prevState","nextState","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composeEnhancers","compose","middleware","thunk","store","createStore","applyMiddleware","document","getElementById"],"mappings":"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","file":"static/js/main.84e2ab6a.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\n\ntype Props = {\n    name?: string;\n    placeholder: string;\n    type?: string;\n    register: UseFormRegisterReturn;\n    error?: {\n        message: string;\n    };\n};\n\nexport const Input: FC<Props> = (props) => {\n    const input = (\n        <input\n            placeholder = { props.placeholder }\n            type = { props.type }\n            { ...props.register } />\n    );\n\n    return (\n        <>\n            <label>\n                <span className = 'errorMessage'>\n                    { props.error?.message }\n                </span>\n                { input }\n            </label>\n        </>\n    );\n};\n\nInput.defaultProps = {\n    type: 'text',\n};\n","import { FC } from 'react';\nimport { IButton } from '../../types';\n\nexport const Button: FC<IButton> = (props) => {\n    return (\n        <button\n            onClick = { () => {\n                if (props.onSetNewTask) {\n                    props.onSetNewTask();\n                }\n                if (props.onClick) {\n                    props.onClick();\n                }\n            } }\n            type = { props.type }\n            className = { props.class }>\n            { props.children }\n        </button>\n    );\n};\n\n","import { FC } from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\n\ntype Props = {\n    placeholder: string;\n    type?: string;\n    class?: string;\n    value?: string;\n    register?: UseFormRegisterReturn;\n};\n\nexport const TaskInput: FC<Props> = (props) => {\n    const input = (\n        <input\n            className = { props.class }\n            placeholder = { props.placeholder }\n            type = { props.type }\n            value = { props.value }\n            onChange = { (event) => event.target.value }\n            { ...props.register } />\n    );\n\n    return (\n        <>\n            { input }\n        </>\n    );\n};\n\nTaskInput.defaultProps = {\n    type: 'text',\n};\n","import { FC } from 'react';\n\ntype Props = {\n    error: {\n        message: string;\n    }\n};\n\nexport const ErrorMessage: FC<Props> = (props) => {\n    return (\n        <p className = 'errorMessage'>{ props.error?.message }</p>\n    );\n};\n","export const authTypes = Object.freeze({\n    SET_TOKEN:      'SET_TOKEN',\n    SET_ISLOGGEDIN: 'SET_ISLOGGEDIN',\n    START_FETCHING: 'START_FETCHING',\n    STOP_FETCHING:  'STOP_FETCHING',\n});\n","export const todosTypes = Object.freeze({\n    ADD_TODO:              'ADD_TODO',\n    SET_TODO_BY_ID:        'SET_TODO_BY_ID',\n    SET_TODOS:             'SET_TODOS',\n    DELETE_TODO:           'DELETE_TODO',\n    SET_NEW_TASK_CARD:     'SET-NEW-TASK-CARD',\n    SET_TAGS:              'SET_TAGS',\n    SET_IS_TASK_CARD_OPEN: 'SET_IS_TASK_CARD_OPEN',\n    SET_SELECTED_TAG_ID:   'SET_SELECTED_TAG_ID',\n    SET_SELECTED_TASK_ID:  'SET_SELECTED_TASK_ID',\n    RESET_ALL:             'RESET_ALL',\n});\n","export const toastTypes = Object.freeze({\n    ERROR:   'ERROR',\n    SUCCESS: 'SUCCESS',\n    INFO:    'INFO',\n    RESET:   'RESET',\n});\n","// Core\nimport axios from 'axios';\nimport {\n    ISignupSchema, ILoginSchema, IToken,\n} from '../types';\n\nexport const TODO_API_URL = 'https://lab.lectrum.io/rtx/api/v2/todos';\nexport const AUTH_URL = `${TODO_API_URL}/auth`;\nexport const TASKS_URL = `${TODO_API_URL}/tasks`;\n\nexport const api = Object.freeze({\n    get token() {\n        return localStorage.getItem('token');\n    },\n\n    async signup(userInfo: ISignupSchema): Promise<IToken> {\n        const { data } = await axios.post<IToken>(`${AUTH_URL}/registration`, userInfo);\n\n        return data;\n    },\n\n    async login(credentials: ILoginSchema): Promise<IToken> {\n        const { email, password } = credentials;\n        const { data } = await axios.get<IToken>(`${AUTH_URL}/login`,\n            {\n                headers: {\n                    Authorization: `Basic ${window.btoa(`${email}:${password}`)}`,\n                },\n            });\n\n\n        return data;\n    },\n\n    async logout() {\n        await axios.get(`${AUTH_URL}/logout`,\n            {\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n    },\n});\n","import axios from 'axios';\nimport { TASKS_URL, TODO_API_URL, api } from '.';\nimport {\n    ITodos, ITodoShape, ITodosShape, ITag,\n} from '../types';\n\nexport const todoApi = Object.freeze({\n    async addTodo(todo: ITodos): Promise<ITodoShape> {\n        const { data } = await axios.post<{ data: ITodoShape }>(`${TASKS_URL}`,\n            todo,\n            {\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n\n        return data.data;\n    },\n    async getTodoById(id: string | undefined): Promise<ITodoShape | undefined> {\n        const { data } = await axios.get<ITodoShape>(`${TASKS_URL}/${id}`,\n            {\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n\n        return data.data;\n    },\n    async updateTodoById(id: string, body: ITodos): Promise<ITodoShape | undefined> {\n        const { data } = await axios.put<ITodoShape>(`${TASKS_URL}/${id}`,\n            body,\n            {\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n\n        // eslint-disable-next-line\n            console.log(data.data);\n\n        return data.data;\n    },\n    async deleteTodo(id: string): Promise<void> {\n        await axios.delete<void>(`${TASKS_URL}/${id}`,\n            {\n                headers: {\n                    Authorization: `Bearer ${api.token}`,\n                },\n            });\n    },\n    async getTodos(): Promise<ITodosShape> {\n        const { data } = await axios.get<ITodosShape>(`${TASKS_URL}`, {\n            headers: {\n                Authorization: `Bearer ${api.token}`,\n            },\n        });\n\n        return data;\n    },\n    async getTags(): Promise<ITag[]> {\n        const { data: tags } = await axios.get<ITag[]>(`${TODO_API_URL}/tags`);\n\n        return tags;\n    },\n});\n","import { toastTypes } from '../types';\n\nexport const toastActions = Object.freeze({\n    setError: (errorMessage: string) => {\n        return {\n            type:         toastTypes.ERROR,\n            notification: true,\n            payload:      errorMessage,\n        };\n    },\n\n    setSuccess: (successMessage: string) => {\n        return {\n            type:         toastTypes.SUCCESS,\n            notification: true,\n            payload:      successMessage,\n        };\n    },\n\n    setInfo: (infoMessage: string) => {\n        return {\n            type:         toastTypes.INFO,\n            notification: true,\n            payload:      infoMessage,\n        };\n    },\n\n    reset: () => {\n        return {\n            type:    toastTypes.RESET,\n            payload: '',\n        };\n    },\n});\n","import { AxiosError } from 'axios';\nimport { authTypes } from '../types';\nimport { IToken, ISignupSchema, ILoginSchema } from '../../../types';\nimport { AppThunk } from '../init/store';\nimport { api } from '../../../api';\nimport { toastActions } from './toast';\n\n\nexport const authActions = Object.freeze({\n    setToken: (token: string | IToken) => {\n        return {\n            type:    authTypes.SET_TOKEN,\n            payload: token,\n        };\n    },\n    setIsloggedin: (status: boolean) => {\n        return {\n            type:    authTypes.SET_ISLOGGEDIN,\n            payload: status,\n        };\n    },\n    startFetching: () => {\n        return {\n            type: authTypes.START_FETCHING,\n        };\n    },\n    stopFetching: () => {\n        return {\n            type: authTypes.STOP_FETCHING,\n        };\n    },\n    signUpAsync: (userInfo: ISignupSchema): AppThunk => async (dispatch) => {\n        if (!userInfo) {\n            return null;\n        }\n        try {\n            dispatch(authActions.startFetching);\n            const { confirmPassword, ...newUser } = userInfo;\n            const { data: token } = await api.signup(newUser);\n            dispatch(authActions.setToken(token));\n            dispatch(authActions.setIsloggedin(true));\n            dispatch(toastActions.setSuccess(`Добро пожаловать ${newUser.name}`));\n            localStorage.setItem('token', token);\n        } catch (error) {\n            const { message } = error as AxiosError;\n            dispatch(toastActions.setError(message));\n        } finally {\n            dispatch(authActions.stopFetching());\n        }\n    },\n\n    loginAsync: (userInfo: ILoginSchema): AppThunk => async (dispatch) => {\n        if (!userInfo) {\n            return null;\n        }\n        try {\n            dispatch(authActions.startFetching());\n            const { data: token } = await api.login(userInfo);\n            dispatch(authActions.setToken(token));\n            dispatch(authActions.setIsloggedin(true));\n            localStorage.setItem('token', token);\n            dispatch(toastActions.setSuccess('Добро пожаловать!'));\n\n            return token;\n        } catch (error) {\n            const { message } = error as AxiosError;\n            dispatch(toastActions.setError(message));\n        } finally {\n            dispatch(authActions.stopFetching());\n        }\n    },\n\n    logoutAsync: (): AppThunk => async (dispatch) => {\n        try {\n            dispatch(authActions.setIsloggedin(false));\n            dispatch(authActions.startFetching());\n            await api.logout();\n            localStorage.removeItem('token');\n            dispatch(toastActions.setInfo('Возвращайтесь поскорее;) Мы будем скучать.'));\n            dispatch(authActions.setToken(''));\n        } catch (error) {\n            const { message } = error as AxiosError;\n            dispatch(toastActions.setError(message));\n        } finally {\n            dispatch(authActions.stopFetching());\n        }\n    },\n});\n","import { AxiosError } from 'axios';\nimport { todosTypes } from '../types';\nimport {\n    ITodoShape, ITodos, ITag, ITodosShape,\n} from '../../../types';\nimport { AppThunk } from '../init/store';\nimport { todoApi } from '../../../api/todo';\nimport { toastActions } from './toast';\n\n\nexport const todosActions = Object.freeze({\n    setIsTaskCardOpen: (boolean: boolean) => {\n        return {\n            type:    todosTypes.SET_IS_TASK_CARD_OPEN,\n            payload: boolean,\n        };\n    },\n    setNewTaskCard: () => {\n        return {\n            type: todosTypes.SET_NEW_TASK_CARD,\n        };\n    },\n    addTodo: (todo: ITodoShape | ITodoShape[]) => {\n        return {\n            type:    todosTypes.ADD_TODO,\n            payload: todo,\n        };\n    },\n    setTodoById: (todo: ITodoShape | undefined) => {\n        return {\n            type:    todosTypes.SET_TODO_BY_ID,\n            payload: todo,\n        };\n    },\n    setTodos: (todo: ITodoShape[]) => {\n        return {\n            type:    todosTypes.SET_TODOS,\n            payload: todo,\n        };\n    },\n    deleteTodo: (todoList: ITodosShape[]) => {\n        return {\n            type:    todosTypes.DELETE_TODO,\n            payload: todoList,\n        };\n    },\n    setTags: (tasks: ITag[]) => {\n        return {\n            type:    todosTypes.SET_TAGS,\n            payload: tasks,\n        };\n    },\n    setSelectedTagId: (id: string | undefined) => {\n        return {\n            type:    todosTypes.SET_SELECTED_TAG_ID,\n            payload: id,\n        };\n    },\n    setSelectedTaskId: (id: string) => {\n        return {\n            type:    todosTypes.SET_SELECTED_TASK_ID,\n            payload: id,\n        };\n    },\n    resetAll: () => {\n        return {\n            type: todosTypes.RESET_ALL,\n        };\n    },\n    addTodoAsync: (todoTask: ITodos): AppThunk => async (dispatch) => {\n        if (!todoTask) {\n            return null;\n        }\n        try {\n            const todo = await todoApi.addTodo(todoTask);\n            dispatch(todosActions.addTodo(todo));\n            dispatch(toastActions.setInfo('Задача добавлена'));\n        } catch (error) {\n            const { message } = error as AxiosError;\n            dispatch(toastActions.setError(message));\n        }\n    },\n    updateTodoAsync: (id: string, body: ITodos): AppThunk => async (dispatch) => {\n        try {\n            const todo = await todoApi.updateTodoById(id, body);\n            dispatch(todosActions.setTodoById(todo));\n            dispatch(toastActions.setSuccess(`Задача с идентификатором ${todo?.id} успешно обновлена`));\n        } catch (error) {\n            const { message } = error as AxiosError;\n            dispatch(toastActions.setError(message));\n        }\n    },\n    deleteTodoAsync: (id: string, todoList: ITodoShape[]): AppThunk => async (dispatch) => {\n        try {\n            await todoApi.deleteTodo(id);\n            dispatch(todosActions.setTodos(todoList));\n            dispatch(todosActions.setIsTaskCardOpen(false));\n            dispatch(toastActions.setInfo('Задача удалена'));\n        } catch (error) {\n            const { message } = error as AxiosError;\n            dispatch(toastActions.setError(message));\n        }\n    },\n    getTodosAsync: (): AppThunk => async (dispatch) => {\n        try {\n            const todos = await todoApi.getTodos();\n            dispatch(todosActions.setTodos(todos.data));\n\n            return todos;\n        } catch (error) {\n            const { message } = error as AxiosError;\n            dispatch(toastActions.setError(message));\n        }\n    },\n    getTodoByIdAsync: (id: string | undefined): AppThunk => async (dispatch) => {\n        try {\n            const todo = await todoApi.getTodoById(id);\n            dispatch(todosActions.setTodoById(todo));\n            dispatch(todosActions.setIsTaskCardOpen(true));\n        } catch (error) {\n            const { message } = error as AxiosError;\n            dispatch(toastActions.setError(message));\n        }\n    },\n    getTagsAsync: (todoById?: ITodoShape): AppThunk => async (dispatch) => {\n        try {\n            const tags = await todoApi.getTags();\n            dispatch(todosActions.setTags(tags));\n            dispatch(todosActions.setSelectedTagId(todoById?.tag.id || tags[ 0 ].id));\n        } catch (error) {\n            const { message } = error as AxiosError;\n            dispatch(toastActions.setError(message));\n        }\n    },\n});\n","import { AnyAction } from 'redux';\nimport { authTypes } from '../types';\n\nconst initialState = {\n    token:      null,\n    isLoggedin: false,\n};\n\nexport const authReducer = (state = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case authTypes.SET_TOKEN: {\n            return {\n                ...state,\n                token: action.payload,\n            };\n        }\n\n        case authTypes.SET_ISLOGGEDIN: {\n            return {\n                ...state,\n                isLoggedin: action.payload,\n            };\n        }\n\n        case authTypes.START_FETCHING: {\n            return {\n                ...state,\n                isFetching: true,\n            };\n        }\n\n        case authTypes.STOP_FETCHING: {\n            return {\n                ...state,\n                isFetching: false,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n};\n","// Redux\nimport { AnyAction } from 'redux';\nimport { todosTypes } from '../types';\n\n// Types\nimport { ITag, ITodoShape } from '../../../types';\n\ninterface IInitialState {\n    todos: ITodoShape[],\n    todoById : ITodoShape | null,\n    currentTodoId: string | null,\n    tags: ITag[],\n    isTaskCardOpen: boolean,\n    selectedTagId: string | null,\n    selectedTaskId: string | null,\n}\n\nconst initialState: IInitialState = {\n    todos:          [],\n    todoById:       null,\n    currentTodoId:  null,\n    tags:           [],\n    isTaskCardOpen: false,\n    selectedTagId:  null,\n    selectedTaskId: null,\n};\n\nexport const todosReducer = (state = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case todosTypes.ADD_TODO: {\n            return {\n                ...state,\n                todos: [action.payload, ...state.todos],\n            };\n        }\n        case todosTypes.SET_TODOS: {\n            return {\n                ...state,\n                todos: action.payload,\n            };\n        }\n        case todosTypes.SET_TODO_BY_ID: {\n            return {\n                ...state,\n                todoById: action.payload,\n            };\n        }\n        case todosTypes.SET_NEW_TASK_CARD: {\n            return {\n                ...state,\n                todoById: null,\n            };\n        }\n        case todosTypes.DELETE_TODO: {\n            return {\n                ...state,\n                todos: action.payload,\n            };\n        }\n        case todosTypes.SET_TAGS: {\n            return {\n                ...state,\n                tags: action.payload,\n            };\n        }\n        case todosTypes.SET_SELECTED_TAG_ID: {\n            return {\n                ...state,\n                selectedTagId: action.payload,\n            };\n        }\n        case todosTypes.SET_SELECTED_TASK_ID: {\n            return {\n                ...state,\n                selectedTaskId: action.payload,\n            };\n        }\n        case todosTypes.SET_IS_TASK_CARD_OPEN: {\n            return {\n                ...state,\n                isTaskCardOpen: action.payload,\n            };\n        }\n        case todosTypes.RESET_ALL: {\n            return {\n                ...state,\n                todos:          [],\n                todoById:       null,\n                currentTodoId:  null,\n                tags:           [],\n                isTaskCardOpen: false,\n                selectedTagId:  null,\n                selectedTaskId: null,\n            };\n        }\n        default: return state;\n    }\n};\n","import { AnyAction } from 'redux';\nimport { toastTypes } from '../types';\n\nconst initialState = {\n    type:                '',\n    notificationMessage: '',\n    notification:        false,\n};\n\nexport const toastReducer = (state = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case toastTypes.ERROR: {\n            return {\n                ...state,\n                type:                'error',\n                notification:        true,\n                notificationMessage: action.payload,\n            };\n        }\n\n        case toastTypes.SUCCESS: {\n            return {\n                ...state,\n                type:                'success',\n                notification:        true,\n                notificationMessage: action.payload,\n            };\n        }\n\n        case toastTypes.INFO: {\n            return {\n                ...state,\n                type:                'info',\n                notification:        true,\n                notificationMessage: action.payload,\n            };\n        }\n\n        case toastTypes.RESET: {\n            return {\n                ...state,\n                type:                '',\n                notification:        false,\n                notificationMessage: '',\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n};\n","import { RootState } from '../init/store';\n\nexport const getToken = (state: RootState): string => {\n    return state.auth.token;\n};\n\nexport const getIsloggedin = (state: RootState): boolean => {\n    return state.auth.isLoggedin;\n};\n","import { RootState } from '../init/store';\nimport { ITodoShape, ITag } from '../../../types';\n\nexport const getTodos = (state: RootState): ITodoShape[] => {\n    return state.todos.todos;\n};\nexport const getTodoById = (state: RootState): ITodoShape => {\n    return state.todos.todoById;\n};\n// export const getRequstedTodos = (state: RootState): ITodoShape[] => {\n//     return state.todos.requestedTodoList;\n// };\n\nexport const getTags = (state: RootState): ITag[] => {\n    return state.todos.tags;\n};\n\nexport const getIsTaskCardOpen = (state: RootState): boolean => {\n    return state.todos.isTaskCardOpen;\n};\n\nexport const getSelectedTagId = (state: RootState): string => {\n    return state.todos.selectedTagId;\n};\nexport const getSelectedTaskId = (state: RootState): string => {\n    return state.todos.selectedTaskId;\n};\n","import { RootState } from '../init/store';\n\ntype Props = {\n    type: string;\n    notificationMessage: string;\n};\n\nexport const getNotification = (state: RootState): Props => {\n    return {\n        type:                state.toast.type,\n        notificationMessage: state.toast.notificationMessage,\n    };\n};\n","// Core\nimport { FC } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Redux\nimport { todosActions, getSelectedTagId } from '../../lib/redux';\n\ntype Props = {\n    color: string;\n    bg: string;\n    id: string;\n    name: string;\n    onGetTagId: (id: string) => void;\n};\n\n\nexport const Tag: FC<Props> = ({\n    color, bg, id, name, onGetTagId,\n}) => {\n    const dispatch = useDispatch();\n    const selectedTagId = useSelector(getSelectedTagId);\n    // eslint-disable-next-line\n    console.log(selectedTagId);\n\n    return (\n        <span\n            className = { `tag ${selectedTagId === id ? 'selected' : ''}` }\n            style = { { color, background: bg } }\n            onClick = { () => {\n                onGetTagId(id);\n                dispatch(todosActions.setSelectedTagId(id));\n            }\n            }>{ name }</span>\n    );\n};\n","import * as yup from 'yup';\nimport { ITaskCard } from '../../../types';\n\n// eslint-disable-next-line no-template-curly-in-string\nconst tooShortMessageTitle = 'Минимальная длина поля title — ${min}';\n// eslint-disable-next-line no-template-curly-in-string\nconst tooShortMessageDesc = 'Минимальная длина поля description — ${min}';\n// eslint-disable-next-line no-template-curly-in-string\nconst tooLongMessageTitle = 'Максимальная длина поля title — ${max}';\n// eslint-disable-next-line no-template-curly-in-string\nconst tooLongMessageDesc = 'Максимальная длина поля description — ${max}';\n\n\nexport const schema: yup.SchemaOf<ITaskCard> = yup.object().shape({\n    title: yup\n        .string()\n        .min(3, tooShortMessageTitle)\n        .max(64, tooLongMessageTitle)\n        .required(),\n    description: yup\n        .string()\n        .min(3, tooShortMessageDesc)\n        .max(64, tooLongMessageDesc)\n        .required(),\n});\n","// Core\nimport {    FC, useEffect, MouseEvent } from 'react';\nimport  DatePicker  from 'react-datepicker';\nimport { ru } from 'date-fns/locale';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// Components\nimport { TaskInput, Button, ErrorMessage } from '../../elements';\nimport { Tag } from '../../Tag';\nimport { schema } from './config';\n\n// Types\nimport { ITodos, ITodoShape } from '../../../types';\n\n// Redux\nimport {\n    todosActions,\n    getTags,\n    getTodoById,\n    getTodos,\n    getSelectedTagId,\n} from '../../../lib/redux';\n\n// Styles\nimport 'react-datepicker/dist/react-datepicker.css';\n\nexport const TaskCard: FC<ITodoShape | any> = (props) => {\n    const dispatch = useDispatch();\n    const selectedTagId = useSelector(getSelectedTagId);\n    const todoById = useSelector(getTodoById);\n    const todoList = useSelector(getTodos);\n    const startDate = props.deadline ? new Date(props.deadline) : new Date();\n\n    useEffect(() => {\n        if (todoById) {\n            dispatch(todosActions.getTagsAsync(todoById));\n\n            return;\n        }\n        dispatch(todosActions.getTagsAsync());\n    }, [todoById]);\n\n    const form = useForm({\n        mode:     'onTouched',\n        resolver: yupResolver(schema),\n    });\n\n    useEffect(() => {\n        if (todoById) {\n            form.setValue('title', todoById.title);\n            form.setValue('description', todoById.description);\n            form.setValue('deadline', new Date(todoById.deadline));\n            form.setValue('completed', todoById.completed);\n            form.setValue('tag', todoById.tag.id || selectedTagId);\n        }\n        form.setValue('deadline', startDate);\n    }, [todoById]);\n\n\n    const onGetTagId = (id: string) => {\n        if (selectedTagId) {\n            form.setValue('tag', selectedTagId);\n        }\n        if (!selectedTagId) {\n            form.setValue('tag', { id });\n        }\n    };\n\n\n    const tags = useSelector(getTags);\n    const tagsJSX = tags.map((tag) => {\n        return <Tag\n            key = { tag.id } { ...tag }\n            onGetTagId = { onGetTagId } />;\n    });\n\n    const dispatchAction = (taskToDo: ITodos) => {\n        const body = {\n            completed:   taskToDo.completed,\n            title:       taskToDo.title,\n            deadline:    taskToDo.deadline,\n            description: taskToDo.description,\n            tag:         taskToDo.tag,\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        todoById\n            ? dispatch(todosActions.updateTodoAsync(props.id, body))\n            :  dispatch(todosActions.addTodoAsync(taskToDo));\n    };\n\n    const onSubmit = ({\n        deadline, description, title,\n    }: ITodos) => {\n        const taskToDo = {\n            completed: false,\n            deadline,\n            description,\n            tag:       selectedTagId,\n            title,\n        };\n        dispatchAction(taskToDo);\n        dispatch(todosActions.setIsTaskCardOpen(false));\n    };\n\n    const onDelete = (id: string) => {\n        const updatedTodoList = todoList.filter((todo) => todo.id !== id);\n        dispatch(todosActions.deleteTodoAsync(id, updatedTodoList));\n    };\n\n    const isCompleted = (event: MouseEvent<HTMLElement>) => {\n        event.preventDefault();\n        const todoCompleted = {\n            title:       todoById.title,\n            deadline:    todoById.deadline,\n            tag:         todoById.tag.id,\n            completed:   true,\n            description: todoById.description,\n        };\n        dispatch(todosActions.updateTodoAsync(props.id, todoCompleted));\n        dispatch(todosActions.setIsTaskCardOpen(false));\n    };\n\n    return (\n        <form onSubmit = { form.handleSubmit(onSubmit) }>\n            <div className = 'head'>\n                { todoById\n                && <><button className = 'button-complete-task' onClick = { isCompleted }>\n                        завершить\n                </button>\n                <div className = 'button-remove-task' onClick = { () => onDelete(props.id) }></div></> }\n            </div>\n            <div className = 'content'>\n                <label className = 'label'>\n                    Задачи\n                    <TaskInput\n                        class = 'title'\n                        placeholder = 'Пройти интенсив по React + Redux + TS + Mobx'\n                        register = { form.register('title') } />\n                </label>\n                <div className = 'deadline'>\n                    <span className = 'label'>Дедлайн</span>\n                    <span className = 'date'>\n                        <Controller\n                            control = { form.control }\n                            name = 'deadline'\n                            render = { ({\n                                field: {\n                                    onChange, value,\n                                },\n                            }) => (\n                                <DatePicker\n                                    locale = { ru }\n                                    onChange = { (date) => onChange(date) }\n                                    minDate = { startDate }\n                                    selected = { value || startDate } />\n                            ) } />\n                    </span>\n                </div>\n                <div className = 'description'>\n                    <label className = 'label'>\n                    Описание\n                        <TaskInput\n                            class = 'text'\n                            placeholder = 'После изучения всех технологий, завершить работу над проектами и найти работу.'\n                            register = { form.register('description') } />\n                    </label>\n                </div>\n                <div className = 'tags'>\n                    { tagsJSX }\n                </div>\n                <div className = 'errors'>\n                    <ErrorMessage error = { form.formState.errors.title } />\n                    <ErrorMessage error = { form.formState.errors.description } />\n                </div>\n                <div className = 'form-controls'>\n                    <Button\n                        type = { 'reset' }\n                        onClick = { form.reset }\n                        class = { 'button-reset-task' }>Reset</Button>\n                    <Button\n                        type = { 'submit' }\n                        class = { 'button-save-task' }>Save</Button>\n                </div>\n            </div>\n        </form>\n    );\n};\n","import { FC } from 'react';\n\nexport const Footer: FC = () => {\n    return (\n        <footer>\n            <span>© 2022  Lectrum LLC - Все права защищены.</span>\n        </footer>\n    );\n};\n","import { FC } from 'react';\nimport { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport { ITodoShape, ITag } from '../../types';\n\ninterface IProps extends ITodoShape {\n    todoById: ITodoShape,\n    onGetTodoById: (id: string | undefined) => void,\n    tag: ITag;\n}\n\nexport const Task: FC<IProps> = (props) => {\n    const {\n        title, deadline, tag, todoById,\n        onGetTodoById, id, completed,\n    } = props;\n\n    if (todoById?.id === id) {\n        return (\n            <>\n                <div\n                    className = { `task ${todoById.completed ? 'completed' : ''}` } onClick = { () => {\n                        onGetTodoById(id);\n                    }\n                    }>\n                    <span className = 'title'>{ todoById.title }</span>\n                    <div className = 'meta'>\n                        <span className = 'deadline'>{ `${format(new Date(todoById.deadline), 'PP', { locale: ru })}` }</span>\n                        <span className = 'tag' style = { { color: todoById.tag.color, background: todoById.tag.bg } }>{ todoById.tag.name }</span>\n                    </div>\n                </div>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <div\n                className = { `task ${completed ? 'completed' : ''}` } onClick = { () => {\n                    onGetTodoById(id);\n                }\n                }>\n                <span className = 'title'>{ title }</span>\n                <div className = 'meta'>\n                    <span className = 'deadline'>{ `${format(new Date(deadline), 'PP', { locale: ru })}` }</span>\n                    <span className = 'tag' style = { { color: tag.color, background: tag.bg } }>{ tag.name }</span>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Core\nimport { FC, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// Components\nimport { Button } from '../elements';\nimport { TaskCard } from './TaskCard';\nimport { Footer } from '../Footer';\nimport { Task } from '../Task';\n\n// Redux\nimport {\n    getIsTaskCardOpen,\n    todosActions,\n    authActions,\n    getTodos,\n    getTodoById,\n} from '../../lib/redux';\n\nexport const TaskManager:FC = () => {\n    const dispatch = useDispatch();\n    const token = localStorage.getItem('token');\n\n    useEffect(() => {\n        if (token) {\n            dispatch(authActions.setIsloggedin(true));\n            dispatch(authActions.setToken(token));\n        }\n        dispatch(todosActions.getTodosAsync());\n    }, []);\n\n    const isTaskCardOpen = useSelector(getIsTaskCardOpen);\n\n    const onSetNewTask = (): void => {\n        dispatch(todosActions.setNewTaskCard());\n        dispatch(todosActions.setIsTaskCardOpen(true));\n    };\n\n    const todos = useSelector(getTodos);\n    const todoById = useSelector(getTodoById);\n\n    const onGetTodoById = (id: string | undefined) => {\n        dispatch(todosActions.getTodoByIdAsync(id));\n    };\n\n\n    const tasksJSX = todos.map((todo) => {\n        return <Task\n            key = { todo.id } { ...todo }\n            todoById = { todoById }\n            onGetTodoById = { onGetTodoById } />;\n    });\n\n    const onLogout = () => {\n        dispatch(authActions.logoutAsync());\n        dispatch(todosActions.resetAll());\n    };\n\n\n    return (\n        <>\n            <nav>\n                <NavLink to = '/todo/task-manager'>К задачам</NavLink>\n                <NavLink to = '/todo/profile'>Профиль</NavLink>\n                <NavLink\n                    className = 'button-logout'\n                    to = '/todo/login'\n                    onClick = { onLogout }>Выйти</NavLink>\n            </nav>\n            <main>\n                <div className = 'controls'>\n                    <Button\n                        class = { 'button-create-task' }\n                        onSetNewTask = { onSetNewTask } >Новая задача</Button>\n                </div>\n                <div className = 'wrap'>\n                    <div className = { `list ${todos.length === 0 ? 'empty' : ''}` }>\n                        <div className = 'tasks'>\n                            { tasksJSX }\n                        </div>\n                    </div>\n                    { isTaskCardOpen && <div className = 'task-card'>\n                        { !todoById && <TaskCard /> }\n                        { todoById && <TaskCard { ...todoById } /> }\n                    </div> }\n                </div>\n            </main>\n            <Footer />\n        </>\n    );\n};\n\n","import { FC, useEffect, MouseEvent } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { getIsloggedin } from '../../lib/redux';\n\ntype Props = {\n    page?: string | any;\n};\n\nexport const Nav: FC<Props> = (props) => {\n    const pageURL = props?.page;\n    const token = localStorage.getItem('token');\n    const isLoggedin = useSelector(getIsloggedin);\n    const navigate = useNavigate();\n\n\n    useEffect(() => {\n        if (token && isLoggedin) {\n            navigate(pageURL || '/todo/profile');\n        }\n    }, [token, isLoggedin]);\n\n    const onDisable = (event: MouseEvent<HTMLAnchorElement>) => {\n        event.preventDefault();\n    };\n\n\n    return (\n        <>\n            <nav>\n                <NavLink to = '/todo/login'>Войти</NavLink>\n                <NavLink\n                    className = { !token ? 'disabled' : '' }\n                    onClick = { onDisable }\n                    to = '/todo/task-manager'>К задачам</NavLink>\n                <NavLink\n                    className = { !token ? 'disabled' : '' }\n                    onClick = { onDisable }\n                    to = '/todo/profile'>Профиль</NavLink>\n            </nav>\n        </>\n    );\n};\n","// Core\nimport { FC } from 'react';\n\n// Instruments\nimport { NavLink } from 'react-router-dom';\n\n// Redux\nimport { useDispatch } from 'react-redux';\nimport { authActions, todosActions } from '../../lib/redux';\n\n// Components\nimport { Footer } from '../Footer';\n\nexport const Profile: FC = () => {\n    const dispatch = useDispatch();\n    const onLogout = () => {\n        dispatch(authActions.logoutAsync());\n        dispatch(todosActions.resetAll());\n    };\n\n    return (\n        <>\n            <nav>\n                <NavLink to = '/todo/task-manager'>К задачам</NavLink>\n                <NavLink to = '/todo/profile'>Профиль</NavLink>\n                <NavLink\n                    className = 'button-logout'\n                    to = '/todo/login'\n                    onClick = { onLogout }>Выйти</NavLink>\n            </nav>\n            <main>\n                <h1>Профиль пользователя</h1>\n            </main>\n            <Footer />\n        </>\n    );\n};\n","import * as yup from 'yup';\nimport { ILoginSchema } from '../../../types';\n\n// eslint-disable-next-line no-template-curly-in-string\nconst tooShortMessage = 'минимальная длина - ${min} символов';\n// eslint-disable-next-line no-template-curly-in-string\nconst tooLongMessage = 'максимальная длина - ${max} символов';\n// eslint-disable-next-line no-template-curly-in-string\nconst emailMessage = 'Поле email обязательно для заполнения';\n// eslint-disable-next-line no-template-curly-in-string\nconst validEmailMessage = 'почта должна быть настоящей';\n\nexport const schema: yup.SchemaOf<ILoginSchema> = yup.object().shape({\n    email: yup\n        .string()\n        .email(validEmailMessage)\n        .required(emailMessage),\n    password: yup\n        .string()\n        .min(8, tooShortMessage)\n        .max(64, tooLongMessage)\n        .required('*'),\n});\n","// Core\nimport { FC } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { NavLink } from 'react-router-dom';\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch } from 'react-redux';\nimport { authActions } from '../../../lib/redux/actions';\n\n// Components\nimport { Input } from '../../elements';\nimport { Nav } from '../../Nav';\nimport { schema } from './config';\n\n// Types\nimport { ILoginSchema } from '../../../types';\n\nexport const Login: FC = () => {\n    const dispatch = useDispatch();\n    const form = useForm({\n        mode:     'onTouched',\n        resolver: yupResolver(schema),\n    });\n\n    const onSubmit = (credentials: ILoginSchema) => {\n        dispatch(authActions.loginAsync(credentials));\n        form.reset();\n    };\n\n    return (\n        <>\n            <Nav page = '/todo/task-manager' />\n            <main>\n                <section className = 'sign-form'>\n                    <form onSubmit = { form.handleSubmit(onSubmit) }>\n                        <fieldset>\n                            <legend>Вход</legend>\n                            <Input\n                                type = { 'email' }\n                                placeholder = { 'Электропочта' }\n                                error = { form.formState.errors.email }\n                                register = { form.register('email') } />\n                            <Input\n                                type = { 'password' }\n                                placeholder = { 'Пароль' }\n                                error = { form.formState.errors.password }\n                                register = { form.register('password') } />\n                            <input\n                                type = 'submit'\n                                className = 'button-login'\n                                value = { 'Войти' } />\n                        </fieldset>\n                        <p>{ 'Если у вас до сих пор нет учётной записи, вы можете ' }\n                            <NavLink to = '/todo/signup'>зарегистрироваться</NavLink>\n                            { '.' }\n                        </p>\n                    </form>\n                </section>\n            </main>\n        </>\n    );\n};\n","import * as yup from 'yup';\nimport { ISignupSchema } from '../../../types';\n\n// eslint-disable-next-line no-template-curly-in-string\nconst tooShortMessage = 'минимальная длина - ${min} символов';\n// eslint-disable-next-line no-template-curly-in-string\nconst tooLongMessage = 'максимальная длина - ${max} символов';\n// eslint-disable-next-line no-template-curly-in-string\nconst emailMessage = 'Поле email обязательно для заполнения';\n// eslint-disable-next-line no-template-curly-in-string\nconst validEmailMessage = 'Почта должна быть настоящей';\n\nexport const schema: yup.SchemaOf<ISignupSchema> = yup.object().shape({\n    name: yup\n        .string()\n        .min(2, tooShortMessage)\n        .max(50, tooLongMessage)\n        .required(),\n    email: yup\n        .string()\n        .email(validEmailMessage)\n        .required(emailMessage),\n    password: yup\n        .string()\n        .min(8, tooShortMessage)\n        .max(64, tooLongMessage)\n        .required(),\n    confirmPassword: yup\n        .string()\n        .oneOf([yup.ref('password')], 'Пароли должны совпадать')\n        .required(),\n});\n","// Core\nimport { FC } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\n// Types\nimport { ISignupSchema } from '../../../types';\n\n// Redux\nimport { authActions } from '../../../lib/redux/actions';\n\n// Components\nimport { Input } from '../../elements';\nimport { Nav } from '../..';\nimport { schema } from './config';\n\nexport const Signup: FC = () => {\n    const dispatch = useDispatch();\n\n    const form = useForm({\n        mode:     'onTouched',\n        resolver: yupResolver(schema),\n    });\n\n    const onSubmit = (credentials: ISignupSchema) => {\n        dispatch(authActions.signUpAsync(credentials));\n        // navigate('/todo/task-manager');\n        form.reset();\n    };\n\n\n    return (\n        <>\n            <Nav page = '/todo/task-manager' />\n            <main>\n                <section className = 'sign-form' >\n                    <form onSubmit = { form.handleSubmit(onSubmit) }>\n                        <fieldset>\n                            <legend>Регистрация</legend>\n                            <Input\n                                placeholder = { 'Имя и фамилия' }\n                                error = { form.formState.errors.name }\n                                register = { form.register('name') } />\n                            <Input\n                                type = { 'email' }\n                                placeholder = { 'Электропочта' }\n                                error = { form.formState.errors.email }\n                                register = { form.register('email') } />\n                            <Input\n                                type = { 'password' }\n                                placeholder = { 'Пароль' }\n                                error = { form.formState.errors.password }\n                                register = { form.register('password') } />\n                            <Input\n                                type = { 'password' }\n                                placeholder = { 'Подтверждение пароля' }\n                                error = { form.formState.errors.confirmPassword }\n                                register = { form.register('confirmPassword') } />\n                            <input\n                                type = 'submit'\n                                className = 'button-login'\n                                value = 'Зарегистрироваться' />\n                        </fieldset>\n\n                        <p>{ 'Перейти к ' }\n                            <NavLink to = '/todo/login'>логину</NavLink>\n                            { '.' }\n                        </p>\n                    </form>\n                </section>\n            </main>\n        </>\n    );\n};\n","import { ToastOptions } from 'react-toastify';\n\nexport const toastOptions: ToastOptions = Object.freeze({\n    position:        'top-right',\n    autoClose:       7000,\n    hideProgressBar: false,\n    closeOnClick:    true,\n    pauseOnHover:    true,\n    draggable:       true,\n    progress:        undefined,\n});\n","// Core\nimport { FC } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { ToastContainer, Slide } from 'react-toastify';\n\n// Components\nimport { TaskManager, Profile } from './components';\nimport { Login, Signup } from './components/forms';\n\n// Hooks\nimport { useNotification } from './hooks';\n\nexport const App: FC = () => {\n    useNotification();\n\n    return (\n        <>\n            <ToastContainer\n                theme = 'colored'\n                icon = { false } newestOnTop\n                transition = { Slide } />;\n\n            <Routes>\n                <Route path = '/todo/login' element = { <Login /> } />\n                <Route path = '/todo/signup' element = { <Signup />  } />\n                <Route path = '/todo/task-manager' element = { <TaskManager />  } />\n                <Route path = '/todo/profile' element = { <Profile />  } />\n                <Route path = '*' element = { <Navigate to = '/todo/login' replace /> } />\n            </Routes>\n        </>\n    );\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { getNotification } from '../lib/redux/selectors';\nimport { toastOptions } from '../constants';\nimport { toastActions } from '../lib/redux/actions';\n\nexport const useNotification = () => {\n    const data = useSelector(getNotification);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (data.type === 'error') {\n            toast.error(data.notificationMessage, toastOptions);\n            dispatch(toastActions.reset());\n        }\n        if (data.type === 'success') {\n            toast.success(data.notificationMessage, toastOptions);\n            dispatch(toastActions.reset());\n        }\n        if (data.type === 'info') {\n            toast.info(data.notificationMessage, toastOptions);\n            dispatch(toastActions.reset());\n        }\n    }, [data]);\n};\n","// Core\nimport { combineReducers } from 'redux';\nimport {\n    authReducer as auth,\n    todosReducer as todos,\n    toastReducer as toast,\n} from '../reducers';\n\n// Reducers\n\nexport const rootReducer = combineReducers({\n    auth,\n    todos,\n    toast,\n});\n","// Core\nimport { AnyAction, compose, Middleware } from 'redux';\n/* eslint-disable import/no-extraneous-dependencies, node/no-unpublished-import */\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\n\nexport const logger = createLogger({\n    duration:  true,\n    collapsed: true,\n    colors:    {\n        title: (action: AnyAction) => {\n            return action.error ? 'firebrick' : 'deepskyblue';\n        },\n        prevState: () => '#1C5FAF',\n        action:    () => '#149945',\n        nextState: () => '#A47104',\n        error:     () => '#ff0005',\n    },\n});\n\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\nconst composeEnhancers\n    = developmentEnvironment && devtools ? devtools : compose;\n\nconst middleware: Middleware[] = [thunk];\n\nif (developmentEnvironment) {\n    middleware.push(logger);\n}\n\nexport { composeEnhancers, middleware };\n","// Core\nimport { createStore, applyMiddleware, AnyAction } from 'redux';\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\n\n// Instruments\nimport { rootReducer } from './rootReducer';\nimport {\n    composeEnhancers,\n    middleware,\n} from './middleware';\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(...middleware)),\n);\n\n// eslint-disable-next-line\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n// eslint-disable-next-line\nexport type Action = { type: string; payload: unknown; error?: boolean };\n// eslint-disable-next-line\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, AnyAction>;\nexport type TDispatch = ThunkDispatch<RootState, void, AnyAction>;\n","// Core\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\n// Components\nimport { App } from './app';\n\n// Instruments\nimport { store } from './lib/redux/init/store';\n\n// Styles\nimport './theme/styles/index.scss';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nrender(\n    <Provider store = { store }>\n        <Router>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById('root'),\n    () => {\n        // eslint-disable-next-line no-console\n        console.log(\n            '%c Приложение успешно запущено ',\n            'background: #00ff00; color: #000000; padding: 2.5px;',\n        );\n    },\n);\n"],"sourceRoot":""}